// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p19
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:152

#ifndef _TAO_IDL_NODEJSTESTC_NQP7ZV_H_
#define _TAO_IDL_NODEJSTESTC_NQP7ZV_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "NodeJSTest_export.h"
#include "tao/ORB.h"
#include "tao/Basic_Types.h"
#include "tao/String_Manager_T.h"
#include "tao/Sequence_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Array_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Basic_Argument_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include "tao/Fixed_Array_Argument_T.h"
#include "tao/Var_Array_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "tao/LongSeqC.h"
#include "tao/ShortSeqC.h"
#include "tao/StringSeqC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 2 || TAO_BETA_VERSION != 0
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO NodeJSTest_Export

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:38

namespace Mod
{

  // TAO_IDL - Generated from
  // be/be_visitor_enum/enum_ch.cpp:47

  enum MyEnum
  {
    one,
    two,
    three,
    four
  };

  typedef MyEnum &MyEnum_out;

  // TAO_IDL - Generated from
  // be/be_type.cpp:261

  struct BasicTypes;

  typedef
    ::TAO_Var_Var_T<
        BasicTypes
      >
    BasicTypes_var;

  typedef
    ::TAO_Out_T<
        BasicTypes
      >
    BasicTypes_out;

  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:51

  struct NodeJSTest_Export BasicTypes
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    
    typedef BasicTypes_var _var_type;
    typedef BasicTypes_out _out_type;
    
    ::CORBA::Octet o;
    ::CORBA::UShort us;
    ::CORBA::Short s;
    ::CORBA::ULong ul;
    ::CORBA::Long l;
    ::CORBA::ULongLong ull;
    ::CORBA::LongLong ll;
    ::CORBA::Float f;
    ::CORBA::Double d;
    ::CORBA::LongDouble ld;
    ::CORBA::Boolean b;
    ::CORBA::Char c;
    ::TAO::String_Manager str;
    ::TAO::WString_Manager wstr;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_MOD_MYSEQ_CH_)
#define _MOD_MYSEQ_CH_

  class MySeq;

  typedef
    ::TAO_FixedSeq_Var_T<
        MySeq
      >
    MySeq_var;

  typedef
    ::TAO_Seq_Out_T<
        MySeq
      >
    MySeq_out;

  class NodeJSTest_Export MySeq
    : public
        ::TAO::unbounded_value_sequence<
            ::CORBA::Short
          >
  {
  public:
    MySeq (void);
    MySeq ( ::CORBA::ULong max);
    MySeq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Short* buffer,
      ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
    MySeq (const MySeq &) = default;
    MySeq (MySeq &&) = default;
    MySeq& operator= (const MySeq &) = default;
    MySeq& operator= (MySeq &&) = default;
#endif /* ACE_HAS_CPP11 */
    virtual ~MySeq (void);
    

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    
    typedef MySeq_var _var_type;
    typedef MySeq_out _out_type;
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_MOD_NESTEDSEQ_CH_)
#define _MOD_NESTEDSEQ_CH_

  class NestedSeq;

  typedef
    ::TAO_VarSeq_Var_T<
        NestedSeq
      >
    NestedSeq_var;

  typedef
    ::TAO_Seq_Out_T<
        NestedSeq
      >
    NestedSeq_out;

  class NodeJSTest_Export NestedSeq
    : public
        ::TAO::unbounded_value_sequence<
            CORBA::StringSeq
          >
  {
  public:
    NestedSeq (void);
    NestedSeq ( ::CORBA::ULong max);
    NestedSeq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      CORBA::StringSeq* buffer,
      ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
    NestedSeq (const NestedSeq &) = default;
    NestedSeq (NestedSeq &&) = default;
    NestedSeq& operator= (const NestedSeq &) = default;
    NestedSeq& operator= (NestedSeq &&) = default;
#endif /* ACE_HAS_CPP11 */
    virtual ~NestedSeq (void);
    

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    
    typedef NestedSeq_var _var_type;
    typedef NestedSeq_out _out_type;
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_type.cpp:261

  class MyUnion;

  typedef
    ::TAO_Var_Var_T<
        MyUnion
      >
    MyUnion_var;

  typedef
    ::TAO_Out_T<
        MyUnion
      >
    MyUnion_out;

  class NodeJSTest_Export MyUnion
  {
  public:
    MyUnion (void);
    MyUnion (const MyUnion &);
    ~MyUnion (void);

    MyUnion &operator= (const MyUnion &);

    // TAO_IDL - Generated from
    // be/be_visitor_union/discriminant_ch.cpp:70

    void _d (Mod::MyEnum);
    Mod::MyEnum _d (void) const;

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    
    typedef MyUnion_var _var_type;
    typedef MyUnion_out _out_type;

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:452

    void a ( ::CORBA::Long);
    ::CORBA::Long a (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:452

    void b ( ::CORBA::Boolean);
    ::CORBA::Boolean b (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:452

    void d ( ::CORBA::Double);
    ::CORBA::Double d (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:551

    void s (const Mod::NestedSeq &);
    const Mod::NestedSeq &s (void) const;
    Mod::NestedSeq &s (void);

    // TAO_IDL - Generated from
    // be/be_visitor_union/union_ch.cpp:124

    void _default (void);
  private:
    Mod::MyEnum disc_;

    union
    {
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:380
      ::CORBA::Long a_;
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:380
      ::CORBA::Boolean b_;
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:380
      ::CORBA::Double d_;
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:447
      Mod::NestedSeq *s_;
    } u_;

    /// TAO extension - frees any allocated storage.
    void _reset (void);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_MOD_NESTEDNESTEDSEQ_CH_)
#define _MOD_NESTEDNESTEDSEQ_CH_

  class NestedNestedSeq;

  typedef
    ::TAO_VarSeq_Var_T<
        NestedNestedSeq
      >
    NestedNestedSeq_var;

  typedef
    ::TAO_Seq_Out_T<
        NestedNestedSeq
      >
    NestedNestedSeq_out;

  class NodeJSTest_Export NestedNestedSeq
    : public
        ::TAO::unbounded_value_sequence<
            NestedSeq
          >
  {
  public:
    NestedNestedSeq (void);
    NestedNestedSeq ( ::CORBA::ULong max);
    NestedNestedSeq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      NestedSeq* buffer,
      ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
    NestedNestedSeq (const NestedNestedSeq &) = default;
    NestedNestedSeq (NestedNestedSeq &&) = default;
    NestedNestedSeq& operator= (const NestedNestedSeq &) = default;
    NestedNestedSeq& operator= (NestedNestedSeq &&) = default;
#endif /* ACE_HAS_CPP11 */
    virtual ~NestedNestedSeq (void);
    

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    
    typedef NestedNestedSeq_var _var_type;
    typedef NestedNestedSeq_out _out_type;
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_MOD_NESTEDNESTEDNESTEDSEQ_CH_)
#define _MOD_NESTEDNESTEDNESTEDSEQ_CH_

  class NestedNestedNestedSeq;

  typedef
    ::TAO_VarSeq_Var_T<
        NestedNestedNestedSeq
      >
    NestedNestedNestedSeq_var;

  typedef
    ::TAO_Seq_Out_T<
        NestedNestedNestedSeq
      >
    NestedNestedNestedSeq_out;

  class NodeJSTest_Export NestedNestedNestedSeq
    : public
        ::TAO::unbounded_value_sequence<
            NestedNestedSeq
          >
  {
  public:
    NestedNestedNestedSeq (void);
    NestedNestedNestedSeq ( ::CORBA::ULong max);
    NestedNestedNestedSeq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      NestedNestedSeq* buffer,
      ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
    NestedNestedNestedSeq (const NestedNestedNestedSeq &) = default;
    NestedNestedNestedSeq (NestedNestedNestedSeq &&) = default;
    NestedNestedNestedSeq& operator= (const NestedNestedNestedSeq &) = default;
    NestedNestedNestedSeq& operator= (NestedNestedNestedSeq &&) = default;
#endif /* ACE_HAS_CPP11 */
    virtual ~NestedNestedNestedSeq (void);
    

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    
    typedef NestedNestedNestedSeq_var _var_type;
    typedef NestedNestedNestedSeq_out _out_type;
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_array/array_ch.cpp:54

  typedef ::CORBA::Char CharArray[6];
  typedef ::CORBA::Char CharArray_slice;
  struct CharArray_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        CharArray,
        CharArray_slice,
        CharArray_tag
      >
    CharArray_var;

  typedef
    CharArray
    CharArray_out;

  typedef
    TAO_Array_Forany_T<
        CharArray,
        CharArray_slice,
        CharArray_tag
      >
    CharArray_forany;

  TAO_NAMESPACE_STORAGE_CLASS CharArray_slice *
  CharArray_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  CharArray_free (
      CharArray_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS CharArray_slice *
  CharArray_dup (
      const CharArray_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  CharArray_copy (
      CharArray_slice *_tao_to,
      const CharArray_slice *_tao_from);

  // TAO_IDL - Generated from
  // be/be_visitor_array/array_ch.cpp:54

  typedef ::TAO::String_Manager StringArray[4];
  typedef ::TAO::String_Manager StringArray_slice;
  struct StringArray_tag {};
  

  typedef
    TAO_VarArray_Var_T<
        StringArray,
        StringArray_slice,
        StringArray_tag
      >
    StringArray_var;

  typedef
    TAO_Array_Out_T<
        StringArray,
        StringArray_var,
        StringArray_slice,
        StringArray_tag
      >
    StringArray_out;

  typedef
    TAO_Array_Forany_T<
        StringArray,
        StringArray_slice,
        StringArray_tag
      >
    StringArray_forany;

  TAO_NAMESPACE_STORAGE_CLASS StringArray_slice *
  StringArray_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  StringArray_free (
      StringArray_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS StringArray_slice *
  StringArray_dup (
      const StringArray_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  StringArray_copy (
      StringArray_slice *_tao_to,
      const StringArray_slice *_tao_from);

  // TAO_IDL - Generated from
  // be/be_type.cpp:261

  struct Sample;

  typedef
    ::TAO_Var_Var_T<
        Sample
      >
    Sample_var;

  typedef
    ::TAO_Out_T<
        Sample
      >
    Sample_out;

  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:51

  struct NodeJSTest_Export Sample
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    
    typedef Sample_var _var_type;
    typedef Sample_out _out_type;
    
    ::CORBA::Long id;
    ::TAO::String_Manager data;
    Mod::MyEnum enu;
    Mod::MyEnum enu2;
    Mod::BasicTypes bt;
    Mod::MySeq seq1;
    CORBA::LongSeq seq2;
    Mod::NestedSeq ns;
    

    Mod::MyUnion mu;
    Mod::CharArray ca;
    Mod::StringArray sa;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_MOD_MYUNIONSEQ_CH_)
#define _MOD_MYUNIONSEQ_CH_

  class MyUnionSeq;

  typedef
    ::TAO_VarSeq_Var_T<
        MyUnionSeq
      >
    MyUnionSeq_var;

  typedef
    ::TAO_Seq_Out_T<
        MyUnionSeq
      >
    MyUnionSeq_out;

  class NodeJSTest_Export MyUnionSeq
    : public
        ::TAO::unbounded_value_sequence<
            MyUnion
          >
  {
  public:
    MyUnionSeq (void);
    MyUnionSeq ( ::CORBA::ULong max);
    MyUnionSeq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      MyUnion* buffer,
      ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
    MyUnionSeq (const MyUnionSeq &) = default;
    MyUnionSeq (MyUnionSeq &&) = default;
    MyUnionSeq& operator= (const MyUnionSeq &) = default;
    MyUnionSeq& operator= (MyUnionSeq &&) = default;
#endif /* ACE_HAS_CPP11 */
    virtual ~MyUnionSeq (void);
    

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    
    typedef MyUnionSeq_var _var_type;
    typedef MyUnionSeq_out _out_type;
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_enum/enum_ch.cpp:47

  enum MyOtherEnum
  {
    small,
    medium,
    large
  };

  typedef MyOtherEnum &MyOtherEnum_out;

  // TAO_IDL - Generated from
  // be/be_type.cpp:261

  class MyOtherUnion;

  typedef
    ::TAO_Var_Var_T<
        MyOtherUnion
      >
    MyOtherUnion_var;

  typedef
    ::TAO_Out_T<
        MyOtherUnion
      >
    MyOtherUnion_out;

  class NodeJSTest_Export MyOtherUnion
  {
  public:
    MyOtherUnion (void);
    MyOtherUnion (const MyOtherUnion &);
    ~MyOtherUnion (void);

    MyOtherUnion &operator= (const MyOtherUnion &);

    // TAO_IDL - Generated from
    // be/be_visitor_union/discriminant_ch.cpp:70

    void _d (Mod::MyOtherEnum);
    Mod::MyOtherEnum _d (void) const;

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    
    typedef MyOtherUnion_var _var_type;
    typedef MyOtherUnion_out _out_type;

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:583

    void one (char *);
    void one (const char *);
    void one (const ::CORBA::String_var&);
    const char *one (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:551

    void two (const Mod::NestedSeq &);
    const Mod::NestedSeq &two (void) const;
    Mod::NestedSeq &two (void);

    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:659

    void three (const Mod::Sample &);
    const Mod::Sample &three (void) const;
    Mod::Sample &three (void);

    // TAO_IDL - Generated from
    // be/be_visitor_union/union_ch.cpp:124

    void _default (void);
  private:
    Mod::MyOtherEnum disc_;

    union
    {
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:477
      char *one_;
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:447
      Mod::NestedSeq *two_;
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:522
      Mod::Sample *three_;
    } u_;

    /// TAO extension - frees any allocated storage.
    void _reset (void);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_array/array_ch.cpp:54

  typedef MyOtherUnion JunkType[2];
  typedef MyOtherUnion JunkType_slice;
  struct JunkType_tag {};
  

  typedef
    TAO_VarArray_Var_T<
        JunkType,
        JunkType_slice,
        JunkType_tag
      >
    JunkType_var;

  typedef
    TAO_Array_Out_T<
        JunkType,
        JunkType_var,
        JunkType_slice,
        JunkType_tag
      >
    JunkType_out;

  typedef
    TAO_Array_Forany_T<
        JunkType,
        JunkType_slice,
        JunkType_tag
      >
    JunkType_forany;

  TAO_NAMESPACE_STORAGE_CLASS JunkType_slice *
  JunkType_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  JunkType_free (
      JunkType_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS JunkType_slice *
  JunkType_dup (
      const JunkType_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  JunkType_copy (
      JunkType_slice *_tao_to,
      const JunkType_slice *_tao_from);

  // TAO_IDL - Generated from
  // be/be_visitor_array/array_ch.cpp:54

  typedef ::CORBA::Boolean MaskType[2];
  typedef ::CORBA::Boolean MaskType_slice;
  struct MaskType_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        MaskType,
        MaskType_slice,
        MaskType_tag
      >
    MaskType_var;

  typedef
    MaskType
    MaskType_out;

  typedef
    TAO_Array_Forany_T<
        MaskType,
        MaskType_slice,
        MaskType_tag
      >
    MaskType_forany;

  TAO_NAMESPACE_STORAGE_CLASS MaskType_slice *
  MaskType_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  MaskType_free (
      MaskType_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS MaskType_slice *
  MaskType_dup (
      const MaskType_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  MaskType_copy (
      MaskType_slice *_tao_to,
      const MaskType_slice *_tao_from);

  // TAO_IDL - Generated from
  // be/be_type.cpp:261

  struct MaskedJunk;

  typedef
    ::TAO_Var_Var_T<
        MaskedJunk
      >
    MaskedJunk_var;

  typedef
    ::TAO_Out_T<
        MaskedJunk
      >
    MaskedJunk_out;

  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:51

  struct NodeJSTest_Export MaskedJunk
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    
    typedef MaskedJunk_var _var_type;
    typedef MaskedJunk_out _out_type;
    
    Mod::JunkType junk;
    Mod::MaskType mask;
  };

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:67

} // module Mod

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:68

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:904

  template<>
  class Arg_Traits< ::Mod::MyEnum>
    : public
        Basic_Arg_Traits_T<
            ::Mod::MyEnum,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::Mod::BasicTypes>
    : public
        Var_Size_Arg_Traits_T<
            ::Mod::BasicTypes,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::Mod::MySeq>
    : public
        Var_Size_Arg_Traits_T<
            ::Mod::MySeq,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::Mod::NestedSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::Mod::NestedSeq,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:1058

  template<>
  class Arg_Traits< ::Mod::MyUnion>
    : public
        Var_Size_Arg_Traits_T<
            ::Mod::MyUnion,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::Mod::NestedNestedSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::Mod::NestedNestedSeq,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::Mod::NestedNestedNestedSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::Mod::NestedNestedNestedSeq,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Mod::CharArray_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Mod::CharArray_var,
            ::Mod::CharArray_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Mod::StringArray_tag>
    : public
        Var_Array_Arg_Traits_T<
            ::Mod::StringArray_out,
            ::Mod::StringArray_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::Mod::Sample>
    : public
        Var_Size_Arg_Traits_T<
            ::Mod::Sample,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::Mod::MyUnionSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::Mod::MyUnionSeq,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:904

  template<>
  class Arg_Traits< ::Mod::MyOtherEnum>
    : public
        Basic_Arg_Traits_T<
            ::Mod::MyOtherEnum,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:1058

  template<>
  class Arg_Traits< ::Mod::MyOtherUnion>
    : public
        Var_Size_Arg_Traits_T<
            ::Mod::MyOtherUnion,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Mod::JunkType_tag>
    : public
        Var_Array_Arg_Traits_T<
            ::Mod::JunkType_out,
            ::Mod::JunkType_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  template<>
  class Arg_Traits< ::Mod::MaskType_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::Mod::MaskType_var,
            ::Mod::MaskType_forany,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::Mod::MaskedJunk>
    : public
        Var_Size_Arg_Traits_T<
            ::Mod::MaskedJunk,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:62

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{
  template<>
  struct NodeJSTest_Export Array_Traits<
      Mod::CharArray_forany
    >
  {
    static void free (
        Mod::CharArray_slice * _tao_slice);
    static Mod::CharArray_slice * dup (
        const Mod::CharArray_slice * _tao_slice);
    static void copy (
        Mod::CharArray_slice * _tao_to,
        const Mod::CharArray_slice * _tao_from);
    static Mod::CharArray_slice * alloc (void);
    static void zero (
        Mod::CharArray_slice * _tao_slice);
  };
  template<>
  struct NodeJSTest_Export Array_Traits<
      Mod::StringArray_forany
    >
  {
    static void free (
        Mod::StringArray_slice * _tao_slice);
    static Mod::StringArray_slice * dup (
        const Mod::StringArray_slice * _tao_slice);
    static void copy (
        Mod::StringArray_slice * _tao_to,
        const Mod::StringArray_slice * _tao_from);
    static Mod::StringArray_slice * alloc (void);
    static void zero (
        Mod::StringArray_slice * _tao_slice);
  };
  template<>
  struct NodeJSTest_Export Array_Traits<
      Mod::JunkType_forany
    >
  {
    static void free (
        Mod::JunkType_slice * _tao_slice);
    static Mod::JunkType_slice * dup (
        const Mod::JunkType_slice * _tao_slice);
    static void copy (
        Mod::JunkType_slice * _tao_to,
        const Mod::JunkType_slice * _tao_from);
    static Mod::JunkType_slice * alloc (void);
    static void zero (
        Mod::JunkType_slice * _tao_slice);
  };
  template<>
  struct NodeJSTest_Export Array_Traits<
      Mod::MaskType_forany
    >
  {
    static void free (
        Mod::MaskType_slice * _tao_slice);
    static Mod::MaskType_slice * dup (
        const Mod::MaskType_slice * _tao_slice);
    static void copy (
        Mod::MaskType_slice * _tao_to,
        const Mod::MaskType_slice * _tao_from);
    static Mod::MaskType_slice * alloc (void);
    static void zero (
        Mod::MaskType_slice * _tao_slice);
  };
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

NodeJSTest_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, Mod::MyEnum _tao_enumerator);
NodeJSTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &strm, Mod::MyEnum &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

NodeJSTest_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Mod::BasicTypes &);
NodeJSTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Mod::BasicTypes &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_Mod_MySeq_H_
#define _TAO_CDR_OP_Mod_MySeq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


NodeJSTest_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Mod::MySeq &_tao_sequence);
NodeJSTest_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Mod::MySeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Mod_MySeq_H_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_Mod_NestedSeq_H_
#define _TAO_CDR_OP_Mod_NestedSeq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


NodeJSTest_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Mod::NestedSeq &_tao_sequence);
NodeJSTest_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Mod::NestedSeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Mod_NestedSeq_H_ */

// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_ch.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

NodeJSTest_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Mod::MyUnion &);
NodeJSTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Mod::MyUnion &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_Mod_NestedNestedSeq_H_
#define _TAO_CDR_OP_Mod_NestedNestedSeq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


NodeJSTest_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Mod::NestedNestedSeq &_tao_sequence);
NodeJSTest_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Mod::NestedNestedSeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Mod_NestedNestedSeq_H_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_Mod_NestedNestedNestedSeq_H_
#define _TAO_CDR_OP_Mod_NestedNestedNestedSeq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


NodeJSTest_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Mod::NestedNestedNestedSeq &_tao_sequence);
NodeJSTest_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Mod::NestedNestedNestedSeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Mod_NestedNestedNestedSeq_H_ */

// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

NodeJSTest_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Mod::CharArray_forany &_tao_array);
NodeJSTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Mod::CharArray_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

NodeJSTest_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Mod::StringArray_forany &_tao_array);
NodeJSTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Mod::StringArray_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

NodeJSTest_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Mod::Sample &);
NodeJSTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Mod::Sample &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_Mod_MyUnionSeq_H_
#define _TAO_CDR_OP_Mod_MyUnionSeq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


NodeJSTest_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Mod::MyUnionSeq &_tao_sequence);
NodeJSTest_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Mod::MyUnionSeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Mod_MyUnionSeq_H_ */

// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

NodeJSTest_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, Mod::MyOtherEnum _tao_enumerator);
NodeJSTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &strm, Mod::MyOtherEnum &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_ch.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

NodeJSTest_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Mod::MyOtherUnion &);
NodeJSTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Mod::MyOtherUnion &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

NodeJSTest_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Mod::JunkType_forany &_tao_array);
NodeJSTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Mod::JunkType_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

NodeJSTest_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Mod::MaskType_forany &_tao_array);
NodeJSTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Mod::MaskType_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

NodeJSTest_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Mod::MaskedJunk &);
NodeJSTest_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Mod::MaskedJunk &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1703
#if defined (__ACE_INLINE__)
#include "NodeJSTestC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

