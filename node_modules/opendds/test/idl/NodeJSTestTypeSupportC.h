// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p19
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:152

#ifndef _TAO_IDL_NODEJSTESTTYPESUPPORTC_L9RKCD_H_
#define _TAO_IDL_NODEJSTESTTYPESUPPORTC_L9RKCD_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "NodeJSTest_export.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "dds/DCPS/ZeroCopyInfoSeq_T.h"
#include "dds/DCPS/ZeroCopySeq_T.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Sequence_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "NodeJSTestC.h"
#include "dds/DdsDcpsInfrastructureC.h"
#include "dds/DdsDcpsPublicationC.h"
#include "dds/DdsDcpsSubscriptionExtC.h"
#include "dds/DdsDcpsTopicC.h"
#include "dds/DdsDcpsTypeSupportExtC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 2 || TAO_BETA_VERSION != 0
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO NodeJSTest_Export

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:38

namespace Mod
{

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:102

  typedef ::TAO::DCPS::ZeroCopyDataSeq< Mod::Sample, DCPS_ZERO_COPY_SEQ_DEFAULT_SIZE> SampleSeq;
  

  // TAO_IDL - Generated from
  // be/be_interface.cpp:751

#if !defined (_MOD_SAMPLETYPESUPPORT__VAR_OUT_CH_)
#define _MOD_SAMPLETYPESUPPORT__VAR_OUT_CH_

  class SampleTypeSupport;
  typedef SampleTypeSupport *SampleTypeSupport_ptr;

  typedef
    TAO_Objref_Var_T<
        SampleTypeSupport
      >
    SampleTypeSupport_var;
  
  typedef
    TAO_Objref_Out_T<
        SampleTypeSupport
      >
    SampleTypeSupport_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:43

  class NodeJSTest_Export SampleTypeSupport
    : public virtual ::OpenDDS::DCPS::TypeSupport
  
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    typedef SampleTypeSupport_ptr _ptr_type;
    typedef SampleTypeSupport_var _var_type;
    typedef SampleTypeSupport_out _out_type;

    // The static operations.
    static SampleTypeSupport_ptr _duplicate (SampleTypeSupport_ptr obj);

    static void _tao_release (SampleTypeSupport_ptr obj);

    static SampleTypeSupport_ptr _narrow (::CORBA::Object_ptr obj);
    static SampleTypeSupport_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static SampleTypeSupport_ptr _nil (void);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:140

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    SampleTypeSupport (void);

    

    virtual ~SampleTypeSupport (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    ACE_UNIMPLEMENTED_FUNC (SampleTypeSupport (const SampleTypeSupport &))
#if defined (ACE_HAS_CPP11)
    ACE_UNIMPLEMENTED_FUNC (SampleTypeSupport (SampleTypeSupport &&))
#endif /* ACE_HAS_CPP11 */
    ACE_UNIMPLEMENTED_FUNC (SampleTypeSupport &operator= (const SampleTypeSupport &))
#if defined (ACE_HAS_CPP11)
    ACE_UNIMPLEMENTED_FUNC (SampleTypeSupport &operator= (SampleTypeSupport &&))
#endif /* ACE_HAS_CPP11 */
  };

  // TAO_IDL - Generated from
  // be/be_interface.cpp:751

#if !defined (_MOD_SAMPLEDATAWRITER__VAR_OUT_CH_)
#define _MOD_SAMPLEDATAWRITER__VAR_OUT_CH_

  class SampleDataWriter;
  typedef SampleDataWriter *SampleDataWriter_ptr;

  typedef
    TAO_Objref_Var_T<
        SampleDataWriter
      >
    SampleDataWriter_var;
  
  typedef
    TAO_Objref_Out_T<
        SampleDataWriter
      >
    SampleDataWriter_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:43

  class NodeJSTest_Export SampleDataWriter
    : public virtual ::DDS::DataWriter
  
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    typedef SampleDataWriter_ptr _ptr_type;
    typedef SampleDataWriter_var _var_type;
    typedef SampleDataWriter_out _out_type;

    // The static operations.
    static SampleDataWriter_ptr _duplicate (SampleDataWriter_ptr obj);

    static void _tao_release (SampleDataWriter_ptr obj);

    static SampleDataWriter_ptr _narrow (::CORBA::Object_ptr obj);
    static SampleDataWriter_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static SampleDataWriter_ptr _nil (void);

    virtual ::DDS::InstanceHandle_t register_instance (
      const ::Mod::Sample & instance) = 0;

    virtual ::DDS::InstanceHandle_t register_instance_w_timestamp (
      const ::Mod::Sample & instance,
      const ::DDS::Time_t & timestamp) = 0;

    virtual ::DDS::ReturnCode_t unregister_instance (
      const ::Mod::Sample & instance,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::ReturnCode_t unregister_instance_w_timestamp (
      const ::Mod::Sample & instance,
      ::DDS::InstanceHandle_t handle,
      const ::DDS::Time_t & timestamp) = 0;

    virtual ::DDS::ReturnCode_t write (
      const ::Mod::Sample & instance_data,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::ReturnCode_t write_w_timestamp (
      const ::Mod::Sample & instance_data,
      ::DDS::InstanceHandle_t handle,
      const ::DDS::Time_t & source_timestamp) = 0;

    virtual ::DDS::ReturnCode_t dispose (
      const ::Mod::Sample & instance_data,
      ::DDS::InstanceHandle_t instance_handle) = 0;

    virtual ::DDS::ReturnCode_t dispose_w_timestamp (
      const ::Mod::Sample & instance_data,
      ::DDS::InstanceHandle_t instance_handle,
      const ::DDS::Time_t & source_timestamp) = 0;

    virtual ::DDS::ReturnCode_t get_key_value (
      ::Mod::Sample & key_holder,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::InstanceHandle_t lookup_instance (
      const ::Mod::Sample & instance_data) = 0;

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:140

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    SampleDataWriter (void);

    

    virtual ~SampleDataWriter (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    ACE_UNIMPLEMENTED_FUNC (SampleDataWriter (const SampleDataWriter &))
#if defined (ACE_HAS_CPP11)
    ACE_UNIMPLEMENTED_FUNC (SampleDataWriter (SampleDataWriter &&))
#endif /* ACE_HAS_CPP11 */
    ACE_UNIMPLEMENTED_FUNC (SampleDataWriter &operator= (const SampleDataWriter &))
#if defined (ACE_HAS_CPP11)
    ACE_UNIMPLEMENTED_FUNC (SampleDataWriter &operator= (SampleDataWriter &&))
#endif /* ACE_HAS_CPP11 */
  };

  // TAO_IDL - Generated from
  // be/be_interface.cpp:751

#if !defined (_MOD_SAMPLEDATAREADER__VAR_OUT_CH_)
#define _MOD_SAMPLEDATAREADER__VAR_OUT_CH_

  class SampleDataReader;
  typedef SampleDataReader *SampleDataReader_ptr;

  typedef
    TAO_Objref_Var_T<
        SampleDataReader
      >
    SampleDataReader_var;
  
  typedef
    TAO_Objref_Out_T<
        SampleDataReader
      >
    SampleDataReader_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:43

  class NodeJSTest_Export SampleDataReader
    : public virtual ::OpenDDS::DCPS::DataReaderEx
  
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    typedef SampleDataReader_ptr _ptr_type;
    typedef SampleDataReader_var _var_type;
    typedef SampleDataReader_out _out_type;

    // The static operations.
    static SampleDataReader_ptr _duplicate (SampleDataReader_ptr obj);

    static void _tao_release (SampleDataReader_ptr obj);

    static SampleDataReader_ptr _narrow (::CORBA::Object_ptr obj);
    static SampleDataReader_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static SampleDataReader_ptr _nil (void);

    virtual ::DDS::ReturnCode_t read (
      ::Mod::SampleSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t take (
      ::Mod::SampleSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t read_w_condition (
      ::Mod::SampleSeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t take_w_condition (
      ::Mod::SampleSeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t read_next_sample (
      ::Mod::Sample & received_data,
      ::DDS::SampleInfo & sample_info) = 0;

    virtual ::DDS::ReturnCode_t take_next_sample (
      ::Mod::Sample & received_data,
      ::DDS::SampleInfo & sample_info) = 0;

    virtual ::DDS::ReturnCode_t read_instance (
      ::Mod::SampleSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t take_instance (
      ::Mod::SampleSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t read_instance_w_condition (
      ::Mod::SampleSeq & received_data,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t take_instance_w_condition (
      ::Mod::SampleSeq & received_data,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t read_next_instance (
      ::Mod::SampleSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t take_next_instance (
      ::Mod::SampleSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t read_next_instance_w_condition (
      ::Mod::SampleSeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t previous_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t take_next_instance_w_condition (
      ::Mod::SampleSeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t previous_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t return_loan (
      ::Mod::SampleSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq) = 0;

    virtual ::DDS::ReturnCode_t get_key_value (
      ::Mod::Sample & key_holder,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::InstanceHandle_t lookup_instance (
      const ::Mod::Sample & instance_data) = 0;

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:140

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    SampleDataReader (void);

    

    virtual ~SampleDataReader (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    ACE_UNIMPLEMENTED_FUNC (SampleDataReader (const SampleDataReader &))
#if defined (ACE_HAS_CPP11)
    ACE_UNIMPLEMENTED_FUNC (SampleDataReader (SampleDataReader &&))
#endif /* ACE_HAS_CPP11 */
    ACE_UNIMPLEMENTED_FUNC (SampleDataReader &operator= (const SampleDataReader &))
#if defined (ACE_HAS_CPP11)
    ACE_UNIMPLEMENTED_FUNC (SampleDataReader &operator= (SampleDataReader &&))
#endif /* ACE_HAS_CPP11 */
  };

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:67

} // module Mod

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:38

namespace Mod
{

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:102

  typedef ::TAO::DCPS::ZeroCopyDataSeq< Mod::MaskedJunk, DCPS_ZERO_COPY_SEQ_DEFAULT_SIZE> MaskedJunkSeq;
  

  // TAO_IDL - Generated from
  // be/be_interface.cpp:751

#if !defined (_MOD_MASKEDJUNKTYPESUPPORT__VAR_OUT_CH_)
#define _MOD_MASKEDJUNKTYPESUPPORT__VAR_OUT_CH_

  class MaskedJunkTypeSupport;
  typedef MaskedJunkTypeSupport *MaskedJunkTypeSupport_ptr;

  typedef
    TAO_Objref_Var_T<
        MaskedJunkTypeSupport
      >
    MaskedJunkTypeSupport_var;
  
  typedef
    TAO_Objref_Out_T<
        MaskedJunkTypeSupport
      >
    MaskedJunkTypeSupport_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:43

  class NodeJSTest_Export MaskedJunkTypeSupport
    : public virtual ::OpenDDS::DCPS::TypeSupport
  
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    typedef MaskedJunkTypeSupport_ptr _ptr_type;
    typedef MaskedJunkTypeSupport_var _var_type;
    typedef MaskedJunkTypeSupport_out _out_type;

    // The static operations.
    static MaskedJunkTypeSupport_ptr _duplicate (MaskedJunkTypeSupport_ptr obj);

    static void _tao_release (MaskedJunkTypeSupport_ptr obj);

    static MaskedJunkTypeSupport_ptr _narrow (::CORBA::Object_ptr obj);
    static MaskedJunkTypeSupport_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static MaskedJunkTypeSupport_ptr _nil (void);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:140

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    MaskedJunkTypeSupport (void);

    

    virtual ~MaskedJunkTypeSupport (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    ACE_UNIMPLEMENTED_FUNC (MaskedJunkTypeSupport (const MaskedJunkTypeSupport &))
#if defined (ACE_HAS_CPP11)
    ACE_UNIMPLEMENTED_FUNC (MaskedJunkTypeSupport (MaskedJunkTypeSupport &&))
#endif /* ACE_HAS_CPP11 */
    ACE_UNIMPLEMENTED_FUNC (MaskedJunkTypeSupport &operator= (const MaskedJunkTypeSupport &))
#if defined (ACE_HAS_CPP11)
    ACE_UNIMPLEMENTED_FUNC (MaskedJunkTypeSupport &operator= (MaskedJunkTypeSupport &&))
#endif /* ACE_HAS_CPP11 */
  };

  // TAO_IDL - Generated from
  // be/be_interface.cpp:751

#if !defined (_MOD_MASKEDJUNKDATAWRITER__VAR_OUT_CH_)
#define _MOD_MASKEDJUNKDATAWRITER__VAR_OUT_CH_

  class MaskedJunkDataWriter;
  typedef MaskedJunkDataWriter *MaskedJunkDataWriter_ptr;

  typedef
    TAO_Objref_Var_T<
        MaskedJunkDataWriter
      >
    MaskedJunkDataWriter_var;
  
  typedef
    TAO_Objref_Out_T<
        MaskedJunkDataWriter
      >
    MaskedJunkDataWriter_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:43

  class NodeJSTest_Export MaskedJunkDataWriter
    : public virtual ::DDS::DataWriter
  
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    typedef MaskedJunkDataWriter_ptr _ptr_type;
    typedef MaskedJunkDataWriter_var _var_type;
    typedef MaskedJunkDataWriter_out _out_type;

    // The static operations.
    static MaskedJunkDataWriter_ptr _duplicate (MaskedJunkDataWriter_ptr obj);

    static void _tao_release (MaskedJunkDataWriter_ptr obj);

    static MaskedJunkDataWriter_ptr _narrow (::CORBA::Object_ptr obj);
    static MaskedJunkDataWriter_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static MaskedJunkDataWriter_ptr _nil (void);

    virtual ::DDS::InstanceHandle_t register_instance (
      const ::Mod::MaskedJunk & instance) = 0;

    virtual ::DDS::InstanceHandle_t register_instance_w_timestamp (
      const ::Mod::MaskedJunk & instance,
      const ::DDS::Time_t & timestamp) = 0;

    virtual ::DDS::ReturnCode_t unregister_instance (
      const ::Mod::MaskedJunk & instance,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::ReturnCode_t unregister_instance_w_timestamp (
      const ::Mod::MaskedJunk & instance,
      ::DDS::InstanceHandle_t handle,
      const ::DDS::Time_t & timestamp) = 0;

    virtual ::DDS::ReturnCode_t write (
      const ::Mod::MaskedJunk & instance_data,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::ReturnCode_t write_w_timestamp (
      const ::Mod::MaskedJunk & instance_data,
      ::DDS::InstanceHandle_t handle,
      const ::DDS::Time_t & source_timestamp) = 0;

    virtual ::DDS::ReturnCode_t dispose (
      const ::Mod::MaskedJunk & instance_data,
      ::DDS::InstanceHandle_t instance_handle) = 0;

    virtual ::DDS::ReturnCode_t dispose_w_timestamp (
      const ::Mod::MaskedJunk & instance_data,
      ::DDS::InstanceHandle_t instance_handle,
      const ::DDS::Time_t & source_timestamp) = 0;

    virtual ::DDS::ReturnCode_t get_key_value (
      ::Mod::MaskedJunk & key_holder,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::InstanceHandle_t lookup_instance (
      const ::Mod::MaskedJunk & instance_data) = 0;

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:140

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    MaskedJunkDataWriter (void);

    

    virtual ~MaskedJunkDataWriter (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    ACE_UNIMPLEMENTED_FUNC (MaskedJunkDataWriter (const MaskedJunkDataWriter &))
#if defined (ACE_HAS_CPP11)
    ACE_UNIMPLEMENTED_FUNC (MaskedJunkDataWriter (MaskedJunkDataWriter &&))
#endif /* ACE_HAS_CPP11 */
    ACE_UNIMPLEMENTED_FUNC (MaskedJunkDataWriter &operator= (const MaskedJunkDataWriter &))
#if defined (ACE_HAS_CPP11)
    ACE_UNIMPLEMENTED_FUNC (MaskedJunkDataWriter &operator= (MaskedJunkDataWriter &&))
#endif /* ACE_HAS_CPP11 */
  };

  // TAO_IDL - Generated from
  // be/be_interface.cpp:751

#if !defined (_MOD_MASKEDJUNKDATAREADER__VAR_OUT_CH_)
#define _MOD_MASKEDJUNKDATAREADER__VAR_OUT_CH_

  class MaskedJunkDataReader;
  typedef MaskedJunkDataReader *MaskedJunkDataReader_ptr;

  typedef
    TAO_Objref_Var_T<
        MaskedJunkDataReader
      >
    MaskedJunkDataReader_var;
  
  typedef
    TAO_Objref_Out_T<
        MaskedJunkDataReader
      >
    MaskedJunkDataReader_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:43

  class NodeJSTest_Export MaskedJunkDataReader
    : public virtual ::OpenDDS::DCPS::DataReaderEx
  
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    typedef MaskedJunkDataReader_ptr _ptr_type;
    typedef MaskedJunkDataReader_var _var_type;
    typedef MaskedJunkDataReader_out _out_type;

    // The static operations.
    static MaskedJunkDataReader_ptr _duplicate (MaskedJunkDataReader_ptr obj);

    static void _tao_release (MaskedJunkDataReader_ptr obj);

    static MaskedJunkDataReader_ptr _narrow (::CORBA::Object_ptr obj);
    static MaskedJunkDataReader_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static MaskedJunkDataReader_ptr _nil (void);

    virtual ::DDS::ReturnCode_t read (
      ::Mod::MaskedJunkSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t take (
      ::Mod::MaskedJunkSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t read_w_condition (
      ::Mod::MaskedJunkSeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t take_w_condition (
      ::Mod::MaskedJunkSeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t read_next_sample (
      ::Mod::MaskedJunk & received_data,
      ::DDS::SampleInfo & sample_info) = 0;

    virtual ::DDS::ReturnCode_t take_next_sample (
      ::Mod::MaskedJunk & received_data,
      ::DDS::SampleInfo & sample_info) = 0;

    virtual ::DDS::ReturnCode_t read_instance (
      ::Mod::MaskedJunkSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t take_instance (
      ::Mod::MaskedJunkSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t read_instance_w_condition (
      ::Mod::MaskedJunkSeq & received_data,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t take_instance_w_condition (
      ::Mod::MaskedJunkSeq & received_data,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t read_next_instance (
      ::Mod::MaskedJunkSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t take_next_instance (
      ::Mod::MaskedJunkSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t read_next_instance_w_condition (
      ::Mod::MaskedJunkSeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t previous_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t take_next_instance_w_condition (
      ::Mod::MaskedJunkSeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t previous_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t return_loan (
      ::Mod::MaskedJunkSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq) = 0;

    virtual ::DDS::ReturnCode_t get_key_value (
      ::Mod::MaskedJunk & key_holder,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::InstanceHandle_t lookup_instance (
      const ::Mod::MaskedJunk & instance_data) = 0;

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:140

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    MaskedJunkDataReader (void);

    

    virtual ~MaskedJunkDataReader (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    ACE_UNIMPLEMENTED_FUNC (MaskedJunkDataReader (const MaskedJunkDataReader &))
#if defined (ACE_HAS_CPP11)
    ACE_UNIMPLEMENTED_FUNC (MaskedJunkDataReader (MaskedJunkDataReader &&))
#endif /* ACE_HAS_CPP11 */
    ACE_UNIMPLEMENTED_FUNC (MaskedJunkDataReader &operator= (const MaskedJunkDataReader &))
#if defined (ACE_HAS_CPP11)
    ACE_UNIMPLEMENTED_FUNC (MaskedJunkDataReader &operator= (MaskedJunkDataReader &&))
#endif /* ACE_HAS_CPP11 */
  };

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:67

} // module Mod

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:68

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:62

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_MOD_SAMPLETYPESUPPORT__TRAITS_)
#define _MOD_SAMPLETYPESUPPORT__TRAITS_

  template<>
  struct NodeJSTest_Export Objref_Traits< ::Mod::SampleTypeSupport>
  {
    static ::Mod::SampleTypeSupport_ptr duplicate (
        ::Mod::SampleTypeSupport_ptr p);
    static void release (
        ::Mod::SampleTypeSupport_ptr p);
    static ::Mod::SampleTypeSupport_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Mod::SampleTypeSupport_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_MOD_SAMPLEDATAWRITER__TRAITS_)
#define _MOD_SAMPLEDATAWRITER__TRAITS_

  template<>
  struct NodeJSTest_Export Objref_Traits< ::Mod::SampleDataWriter>
  {
    static ::Mod::SampleDataWriter_ptr duplicate (
        ::Mod::SampleDataWriter_ptr p);
    static void release (
        ::Mod::SampleDataWriter_ptr p);
    static ::Mod::SampleDataWriter_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Mod::SampleDataWriter_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_MOD_SAMPLEDATAREADER__TRAITS_)
#define _MOD_SAMPLEDATAREADER__TRAITS_

  template<>
  struct NodeJSTest_Export Objref_Traits< ::Mod::SampleDataReader>
  {
    static ::Mod::SampleDataReader_ptr duplicate (
        ::Mod::SampleDataReader_ptr p);
    static void release (
        ::Mod::SampleDataReader_ptr p);
    static ::Mod::SampleDataReader_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Mod::SampleDataReader_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_MOD_MASKEDJUNKTYPESUPPORT__TRAITS_)
#define _MOD_MASKEDJUNKTYPESUPPORT__TRAITS_

  template<>
  struct NodeJSTest_Export Objref_Traits< ::Mod::MaskedJunkTypeSupport>
  {
    static ::Mod::MaskedJunkTypeSupport_ptr duplicate (
        ::Mod::MaskedJunkTypeSupport_ptr p);
    static void release (
        ::Mod::MaskedJunkTypeSupport_ptr p);
    static ::Mod::MaskedJunkTypeSupport_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Mod::MaskedJunkTypeSupport_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_MOD_MASKEDJUNKDATAWRITER__TRAITS_)
#define _MOD_MASKEDJUNKDATAWRITER__TRAITS_

  template<>
  struct NodeJSTest_Export Objref_Traits< ::Mod::MaskedJunkDataWriter>
  {
    static ::Mod::MaskedJunkDataWriter_ptr duplicate (
        ::Mod::MaskedJunkDataWriter_ptr p);
    static void release (
        ::Mod::MaskedJunkDataWriter_ptr p);
    static ::Mod::MaskedJunkDataWriter_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Mod::MaskedJunkDataWriter_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_MOD_MASKEDJUNKDATAREADER__TRAITS_)
#define _MOD_MASKEDJUNKDATAREADER__TRAITS_

  template<>
  struct NodeJSTest_Export Objref_Traits< ::Mod::MaskedJunkDataReader>
  {
    static ::Mod::MaskedJunkDataReader_ptr duplicate (
        ::Mod::MaskedJunkDataReader_ptr p);
    static void release (
        ::Mod::MaskedJunkDataReader_ptr p);
    static ::Mod::MaskedJunkDataReader_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Mod::MaskedJunkDataReader_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1703
#if defined (__ACE_INLINE__)
#include "NodeJSTestTypeSupportC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

