// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p19
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from
// be/be_visitor_union/union_ci.cpp:39

// *************************************************************
// Inline operations for union Mod::MyUnion
// *************************************************************

// TAO_IDL - Generated from
// be/be_visitor_union/discriminant_ci.cpp:58

ACE_INLINE
void
Mod::MyUnion::_default ()
{
  this->_reset ();
  this->disc_ = static_cast <Mod::MyEnum> (-1);
}

// Accessor to set the discriminant.
ACE_INLINE
void
Mod::MyUnion::_d (Mod::MyEnum discval)
{
  this->disc_ = discval;
}

// Accessor to get the discriminant.
ACE_INLINE
Mod::MyEnum
Mod::MyUnion::_d (void) const
{
  return this->disc_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:580

// Accessor to set the member.
ACE_INLINE
void
Mod::MyUnion::a (CORBA::Long val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = Mod::one;
  // Set the value.
  this->u_.a_ = val;
}

/// Retrieve the member.
ACE_INLINE
::CORBA::Long
Mod::MyUnion::a (void) const
{
  return this->u_.a_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:580

// Accessor to set the member.
ACE_INLINE
void
Mod::MyUnion::b (CORBA::Boolean val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = Mod::two;
  // Set the value.
  this->u_.b_ = val;
}

/// Retrieve the member.
ACE_INLINE
::CORBA::Boolean
Mod::MyUnion::b (void) const
{
  return this->u_.b_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:580

// Accessor to set the member.
ACE_INLINE
void
Mod::MyUnion::d (CORBA::Double val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = Mod::three;
  // Set the value.
  this->u_.d_ = val;
}

/// Retrieve the member.
ACE_INLINE
::CORBA::Double
Mod::MyUnion::d (void) const
{
  return this->u_.d_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:791

/// Accessor to set the member.
ACE_INLINE
void
Mod::MyUnion::s (const Mod::NestedSeq &val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = Mod::four;
  ACE_NEW (
      this->u_.s_,
      Mod::NestedSeq (val)
    );
}

/// Readonly get method.
ACE_INLINE
const Mod::NestedSeq &
Mod::MyUnion::s (void) const
{
  return *this->u_.s_;
}

/// Read/write get method.
ACE_INLINE
Mod::NestedSeq &
Mod::MyUnion::s (void)
{
  return *this->u_.s_;
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Mod::CharArray_forany>::free (
    Mod::CharArray_slice * _tao_slice
  )
{
  Mod::CharArray_free (_tao_slice);
}

ACE_INLINE
Mod::CharArray_slice *
TAO::Array_Traits<Mod::CharArray_forany>::dup (
    const Mod::CharArray_slice * _tao_slice
  )
{
  return Mod::CharArray_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Mod::CharArray_forany>::copy (
    Mod::CharArray_slice * _tao_to,
    const Mod::CharArray_slice * _tao_from
  )
{
  Mod::CharArray_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Mod::CharArray_forany>::zero (
    Mod::CharArray_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 6; ++i0)
    {
      _tao_slice[i0] = ::CORBA::Char ();
    }
}

ACE_INLINE
Mod::CharArray_slice *
TAO::Array_Traits<Mod::CharArray_forany>::alloc (void)
{
  return Mod::CharArray_alloc ();
}


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Mod::StringArray_forany>::free (
    Mod::StringArray_slice * _tao_slice
  )
{
  Mod::StringArray_free (_tao_slice);
}

ACE_INLINE
Mod::StringArray_slice *
TAO::Array_Traits<Mod::StringArray_forany>::dup (
    const Mod::StringArray_slice * _tao_slice
  )
{
  return Mod::StringArray_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Mod::StringArray_forany>::copy (
    Mod::StringArray_slice * _tao_to,
    const Mod::StringArray_slice * _tao_from
  )
{
  Mod::StringArray_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Mod::StringArray_forany>::zero (
    Mod::StringArray_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 4; ++i0)
    {
      _tao_slice[i0] = ::TAO::String_Manager ();
    }
}

ACE_INLINE
Mod::StringArray_slice *
TAO::Array_Traits<Mod::StringArray_forany>::alloc (void)
{
  return Mod::StringArray_alloc ();
}


// TAO_IDL - Generated from
// be/be_visitor_union/union_ci.cpp:39

// *************************************************************
// Inline operations for union Mod::MyOtherUnion
// *************************************************************

// TAO_IDL - Generated from
// be/be_visitor_union/discriminant_ci.cpp:58

ACE_INLINE
void
Mod::MyOtherUnion::_default ()
{
  this->_reset ();
  this->disc_ = static_cast <Mod::MyOtherEnum> (-1);
}

// Accessor to set the discriminant.
ACE_INLINE
void
Mod::MyOtherUnion::_d (Mod::MyOtherEnum discval)
{
  this->disc_ = discval;
}

// Accessor to get the discriminant.
ACE_INLINE
Mod::MyOtherEnum
Mod::MyOtherUnion::_d (void) const
{
  return this->disc_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:865

/// Accessor to set the member.
ACE_INLINE
void
Mod::MyOtherUnion::one (char *val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = Mod::small;
  this->u_.one_ = val;
}

// Accessor to set the member.
ACE_INLINE
void
Mod::MyOtherUnion::one (const char *val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = Mod::small;
  // Set the value.
  this->u_.one_ = ::CORBA::string_dup (val);
}

/// Accessor to set the member.
ACE_INLINE
void
Mod::MyOtherUnion::one (const ::CORBA::String_var &val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = Mod::small;
  // Set the value.
  ::CORBA::String_var one_var = val;
  this->u_.one_ = one_var._retn ();
}

ACE_INLINE
const char *
Mod::MyOtherUnion::one (void) const // get method
{
  return this->u_.one_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:791

/// Accessor to set the member.
ACE_INLINE
void
Mod::MyOtherUnion::two (const Mod::NestedSeq &val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = Mod::medium;
  ACE_NEW (
      this->u_.two_,
      Mod::NestedSeq (val)
    );
}

/// Readonly get method.
ACE_INLINE
const Mod::NestedSeq &
Mod::MyOtherUnion::two (void) const
{
  return *this->u_.two_;
}

/// Read/write get method.
ACE_INLINE
Mod::NestedSeq &
Mod::MyOtherUnion::two (void)
{
  return *this->u_.two_;
}

// TAO_IDL - Generated from
// be/be_visitor_union_branch/public_ci.cpp:1068

/// Accessor to set the member.
ACE_INLINE
void
Mod::MyOtherUnion::three (const Mod::Sample &val)
{
  // Set the discriminant value.
  this->_reset ();
  this->disc_ = Mod::large;
  ACE_NEW (
      this->u_.three_,
      Mod::Sample (val)
    );
}

// Readonly get method.
ACE_INLINE
const Mod::Sample &
Mod::MyOtherUnion::three (void) const
{
  return *this->u_.three_;
}

// Read/write get method.
ACE_INLINE
Mod::Sample &
Mod::MyOtherUnion::three (void)
{
  return *this->u_.three_;
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Mod::JunkType_forany>::free (
    Mod::JunkType_slice * _tao_slice
  )
{
  Mod::JunkType_free (_tao_slice);
}

ACE_INLINE
Mod::JunkType_slice *
TAO::Array_Traits<Mod::JunkType_forany>::dup (
    const Mod::JunkType_slice * _tao_slice
  )
{
  return Mod::JunkType_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Mod::JunkType_forany>::copy (
    Mod::JunkType_slice * _tao_to,
    const Mod::JunkType_slice * _tao_from
  )
{
  Mod::JunkType_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Mod::JunkType_forany>::zero (
    Mod::JunkType_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 2; ++i0)
    {
      _tao_slice[i0] = Mod::MyOtherUnion ();
    }
}

ACE_INLINE
Mod::JunkType_slice *
TAO::Array_Traits<Mod::JunkType_forany>::alloc (void)
{
  return Mod::JunkType_alloc ();
}


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Mod::MaskType_forany>::free (
    Mod::MaskType_slice * _tao_slice
  )
{
  Mod::MaskType_free (_tao_slice);
}

ACE_INLINE
Mod::MaskType_slice *
TAO::Array_Traits<Mod::MaskType_forany>::dup (
    const Mod::MaskType_slice * _tao_slice
  )
{
  return Mod::MaskType_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Mod::MaskType_forany>::copy (
    Mod::MaskType_slice * _tao_to,
    const Mod::MaskType_slice * _tao_from
  )
{
  Mod::MaskType_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Mod::MaskType_forany>::zero (
    Mod::MaskType_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 2; ++i0)
    {
      _tao_slice[i0] = ::CORBA::Boolean ();
    }
}

ACE_INLINE
Mod::MaskType_slice *
TAO::Array_Traits<Mod::MaskType_forany>::alloc (void)
{
  return Mod::MaskType_alloc ();
}


