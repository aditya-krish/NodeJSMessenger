/* -*- C++ -*- */
/* Generated by /home/agilehealth_ai/DDS/OpenDDS-3.14.1/bin/opendds_idl version 3.14.1 (ACE version 6.2a_p19) running on input file NodeJSTest.idl */
#ifndef OPENDDS_IDL_GENERATED_NODEJSTESTTYPESUPPORTIMPL_H_V6ELXA
#define OPENDDS_IDL_GENERATED_NODEJSTESTTYPESUPPORTIMPL_H_V6ELXA
#include "NodeJSTestC.h"
#include "dds/DCPS/Definitions.h"
#include "dds/DdsDcpsC.h"
#include <v8.h>
#include "NodeJSTestTypeSupportC.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/TypeSupportImpl.h"
#include "tao/LongSeqC.h"
#include "tao/ShortSeqC.h"
#include "tao/StringSeqC.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: LongSeq */


/* End TYPEDEF: LongSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: ShortSeq */


/* End TYPEDEF: ShortSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: StringSeq */


/* End TYPEDEF: StringSeq */

/* End MODULE: CORBA */


/* Begin MODULE: Mod */



/* Begin ENUM: MyEnum */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

NodeJSTest_Export
bool operator<<(Serializer& strm, const Mod::MyEnum& enumval);

NodeJSTest_Export
bool operator>>(Serializer& strm, Mod::MyEnum& enumval);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

NodeJSTest_Export extern const char* gen_Mod_MyEnum_names[];
NodeJSTest_Export extern const size_t gen_Mod_MyEnum_names_size;
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End ENUM: MyEnum */


/* Begin STRUCT: BasicTypes */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

NodeJSTest_Export
void gen_find_size(const Mod::BasicTypes& stru, size_t& size, size_t& padding);

NodeJSTest_Export
bool operator<<(Serializer& strm, const Mod::BasicTypes& stru);

NodeJSTest_Export
bool operator>>(Serializer& strm, Mod::BasicTypes& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
NodeJSTest_Export
const MetaStruct& getMetaStruct<Mod::BasicTypes>();
NodeJSTest_Export
bool gen_skip_over(Serializer& ser, Mod::BasicTypes*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

NodeJSTest_Export
v8::Local<v8::Object> copyToV8(const Mod::BasicTypes& src);

NodeJSTest_Export
void copyFromV8(const v8::Local<v8::Object>& src, Mod::BasicTypes& out);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: BasicTypes */


/* Begin TYPEDEF: MySeq */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

NodeJSTest_Export
void gen_find_size(const Mod::MySeq& seq, size_t& size, size_t& padding);

NodeJSTest_Export
bool operator<<(Serializer& strm, const Mod::MySeq& seq);

NodeJSTest_Export
bool operator>>(Serializer& strm, Mod::MySeq& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

NodeJSTest_Export
bool gen_skip_over(Serializer& ser, Mod::MySeq*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

NodeJSTest_Export
v8::Local<v8::Object> copyToV8(const Mod::MySeq& src);

NodeJSTest_Export
void copyFromV8(const v8::Local<v8::Object>& src, Mod::MySeq& out);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: MySeq */


/* Begin TYPEDEF: NestedSeq */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

NodeJSTest_Export
void gen_find_size(const Mod::NestedSeq& seq, size_t& size, size_t& padding);

NodeJSTest_Export
bool operator<<(Serializer& strm, const Mod::NestedSeq& seq);

NodeJSTest_Export
bool operator>>(Serializer& strm, Mod::NestedSeq& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

NodeJSTest_Export
bool gen_skip_over(Serializer& ser, Mod::NestedSeq*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

NodeJSTest_Export
v8::Local<v8::Object> copyToV8(const Mod::NestedSeq& src);

NodeJSTest_Export
void copyFromV8(const v8::Local<v8::Object>& src, Mod::NestedSeq& out);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: NestedSeq */


/* Begin UNION: MyUnion */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

NodeJSTest_Export
void gen_find_size(const Mod::MyUnion& uni, size_t& size, size_t& padding);

NodeJSTest_Export
bool operator<<(Serializer& strm, const Mod::MyUnion& uni);

NodeJSTest_Export
bool operator>>(Serializer& strm, Mod::MyUnion& uni);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
NodeJSTest_Export
const MetaStruct& getMetaStruct<Mod::MyUnion>();
NodeJSTest_Export
bool gen_skip_over(Serializer& ser, Mod::MyUnion*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

NodeJSTest_Export
v8::Local<v8::Object> copyToV8(const Mod::MyUnion& src);

NodeJSTest_Export
void copyFromV8(const v8::Local<v8::Object>& src, Mod::MyUnion& out);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End UNION: MyUnion */


/* Begin TYPEDEF: NestedNestedSeq */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

NodeJSTest_Export
void gen_find_size(const Mod::NestedNestedSeq& seq, size_t& size, size_t& padding);

NodeJSTest_Export
bool operator<<(Serializer& strm, const Mod::NestedNestedSeq& seq);

NodeJSTest_Export
bool operator>>(Serializer& strm, Mod::NestedNestedSeq& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

NodeJSTest_Export
bool gen_skip_over(Serializer& ser, Mod::NestedNestedSeq*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

NodeJSTest_Export
v8::Local<v8::Object> copyToV8(const Mod::NestedNestedSeq& src);

NodeJSTest_Export
void copyFromV8(const v8::Local<v8::Object>& src, Mod::NestedNestedSeq& out);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: NestedNestedSeq */


/* Begin TYPEDEF: NestedNestedNestedSeq */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

NodeJSTest_Export
void gen_find_size(const Mod::NestedNestedNestedSeq& seq, size_t& size, size_t& padding);

NodeJSTest_Export
bool operator<<(Serializer& strm, const Mod::NestedNestedNestedSeq& seq);

NodeJSTest_Export
bool operator>>(Serializer& strm, Mod::NestedNestedNestedSeq& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

NodeJSTest_Export
bool gen_skip_over(Serializer& ser, Mod::NestedNestedNestedSeq*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

NodeJSTest_Export
v8::Local<v8::Object> copyToV8(const Mod::NestedNestedNestedSeq& src);

NodeJSTest_Export
void copyFromV8(const v8::Local<v8::Object>& src, Mod::NestedNestedNestedSeq& out);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: NestedNestedNestedSeq */


/* Begin TYPEDEF: CharArray */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

NodeJSTest_Export
void gen_find_size(const Mod::CharArray_forany& arr, size_t& size, size_t& padding);

NodeJSTest_Export
bool operator<<(Serializer& strm, const Mod::CharArray_forany& arr);

NodeJSTest_Export
bool operator>>(Serializer& strm, Mod::CharArray_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

NodeJSTest_Export
bool gen_skip_over(Serializer& ser, Mod::CharArray_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

NodeJSTest_Export
v8::Local<v8::Object> copyToV8(const Mod::CharArray& src);

NodeJSTest_Export
void copyFromV8(const v8::Local<v8::Object>& src, Mod::CharArray& out);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: CharArray */


/* Begin TYPEDEF: StringArray */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

NodeJSTest_Export
void gen_find_size(const Mod::StringArray_forany& arr, size_t& size, size_t& padding);

NodeJSTest_Export
bool operator<<(Serializer& strm, const Mod::StringArray_forany& arr);

NodeJSTest_Export
bool operator>>(Serializer& strm, Mod::StringArray_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

NodeJSTest_Export
bool gen_skip_over(Serializer& ser, Mod::StringArray_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

NodeJSTest_Export
v8::Local<v8::Object> copyToV8(const Mod::StringArray& src);

NodeJSTest_Export
void copyFromV8(const v8::Local<v8::Object>& src, Mod::StringArray& out);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: StringArray */


/* Begin STRUCT: Sample */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

NodeJSTest_Export
void gen_find_size(const Mod::Sample& stru, size_t& size, size_t& padding);

NodeJSTest_Export
bool operator<<(Serializer& strm, const Mod::Sample& stru);

NodeJSTest_Export
bool operator>>(Serializer& strm, Mod::Sample& stru);

NodeJSTest_Export
size_t gen_max_marshaled_size(const Mod::Sample& stru, bool align);

NodeJSTest_Export
size_t gen_max_marshaled_size(KeyOnly<const Mod::Sample> stru, bool align);

NodeJSTest_Export
void gen_find_size(KeyOnly<const Mod::Sample> stru, size_t& size, size_t& padding);

NodeJSTest_Export
bool operator<<(Serializer& strm, KeyOnly<const Mod::Sample> stru);

NodeJSTest_Export
bool operator>>(Serializer& strm, KeyOnly<Mod::Sample> stru);

template <>
struct MarshalTraits<Mod::Sample> {
  static bool gen_is_bounded_size() { return false; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Mod {
/// This structure supports use of std::map with one or more keys.
struct NodeJSTest_Export Sample_OpenDDS_KeyLessThan {
  bool operator()(const Mod::Sample& v1, const Mod::Sample& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.id < v2.id) return true;
    if (v2.id < v1.id) return false;
    return false;
  }
};
}


namespace Mod {
class SampleTypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<Mod::Sample> {
  typedef Mod::Sample MessageType;
  typedef Mod::SampleSeq MessageSequenceType;
  typedef Mod::SampleTypeSupport TypeSupportType;
  typedef Mod::SampleTypeSupportImpl TypeSupportTypeImpl;
  typedef Mod::SampleDataWriter DataWriterType;
  typedef Mod::SampleDataReader DataReaderType;
  typedef Mod::Sample_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "Mod::Sample"; }
  static bool gen_has_key () { return true; }
  static size_t key_count () { return 1; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Mod {
class NodeJSTest_Export SampleTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<SampleTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<Sample> TraitsType;
  typedef SampleTypeSupport TypeSupportType;
  typedef SampleTypeSupport::_var_type _var_type;
  typedef SampleTypeSupport::_ptr_type _ptr_type;

  SampleTypeSupportImpl() {}
  virtual ~SampleTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static SampleTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
NodeJSTest_Export
const MetaStruct& getMetaStruct<Mod::Sample>();
NodeJSTest_Export
bool gen_skip_over(Serializer& ser, Mod::Sample*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

NodeJSTest_Export
v8::Local<v8::Object> copyToV8(const Mod::Sample& src);

NodeJSTest_Export
void copyFromV8(const v8::Local<v8::Object>& src, Mod::Sample& out);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: Sample */


/* Begin TYPEDEF: MyUnionSeq */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

NodeJSTest_Export
void gen_find_size(const Mod::MyUnionSeq& seq, size_t& size, size_t& padding);

NodeJSTest_Export
bool operator<<(Serializer& strm, const Mod::MyUnionSeq& seq);

NodeJSTest_Export
bool operator>>(Serializer& strm, Mod::MyUnionSeq& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

NodeJSTest_Export
bool gen_skip_over(Serializer& ser, Mod::MyUnionSeq*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

NodeJSTest_Export
v8::Local<v8::Object> copyToV8(const Mod::MyUnionSeq& src);

NodeJSTest_Export
void copyFromV8(const v8::Local<v8::Object>& src, Mod::MyUnionSeq& out);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: MyUnionSeq */


/* Begin ENUM: MyOtherEnum */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

NodeJSTest_Export
bool operator<<(Serializer& strm, const Mod::MyOtherEnum& enumval);

NodeJSTest_Export
bool operator>>(Serializer& strm, Mod::MyOtherEnum& enumval);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

NodeJSTest_Export extern const char* gen_Mod_MyOtherEnum_names[];
NodeJSTest_Export extern const size_t gen_Mod_MyOtherEnum_names_size;
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End ENUM: MyOtherEnum */


/* Begin UNION: MyOtherUnion */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

NodeJSTest_Export
void gen_find_size(const Mod::MyOtherUnion& uni, size_t& size, size_t& padding);

NodeJSTest_Export
bool operator<<(Serializer& strm, const Mod::MyOtherUnion& uni);

NodeJSTest_Export
bool operator>>(Serializer& strm, Mod::MyOtherUnion& uni);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
NodeJSTest_Export
const MetaStruct& getMetaStruct<Mod::MyOtherUnion>();
NodeJSTest_Export
bool gen_skip_over(Serializer& ser, Mod::MyOtherUnion*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

NodeJSTest_Export
v8::Local<v8::Object> copyToV8(const Mod::MyOtherUnion& src);

NodeJSTest_Export
void copyFromV8(const v8::Local<v8::Object>& src, Mod::MyOtherUnion& out);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End UNION: MyOtherUnion */


/* Begin TYPEDEF: JunkType */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

NodeJSTest_Export
void gen_find_size(const Mod::JunkType_forany& arr, size_t& size, size_t& padding);

NodeJSTest_Export
bool operator<<(Serializer& strm, const Mod::JunkType_forany& arr);

NodeJSTest_Export
bool operator>>(Serializer& strm, Mod::JunkType_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

NodeJSTest_Export
bool gen_skip_over(Serializer& ser, Mod::JunkType_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

NodeJSTest_Export
v8::Local<v8::Object> copyToV8(const Mod::JunkType& src);

NodeJSTest_Export
void copyFromV8(const v8::Local<v8::Object>& src, Mod::JunkType& out);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: JunkType */


/* Begin TYPEDEF: MaskType */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

NodeJSTest_Export
void gen_find_size(const Mod::MaskType_forany& arr, size_t& size, size_t& padding);

NodeJSTest_Export
bool operator<<(Serializer& strm, const Mod::MaskType_forany& arr);

NodeJSTest_Export
bool operator>>(Serializer& strm, Mod::MaskType_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

NodeJSTest_Export
bool gen_skip_over(Serializer& ser, Mod::MaskType_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

NodeJSTest_Export
v8::Local<v8::Object> copyToV8(const Mod::MaskType& src);

NodeJSTest_Export
void copyFromV8(const v8::Local<v8::Object>& src, Mod::MaskType& out);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: MaskType */


/* Begin STRUCT: MaskedJunk */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

NodeJSTest_Export
void gen_find_size(const Mod::MaskedJunk& stru, size_t& size, size_t& padding);

NodeJSTest_Export
bool operator<<(Serializer& strm, const Mod::MaskedJunk& stru);

NodeJSTest_Export
bool operator>>(Serializer& strm, Mod::MaskedJunk& stru);

NodeJSTest_Export
size_t gen_max_marshaled_size(const Mod::MaskedJunk& stru, bool align);

NodeJSTest_Export
size_t gen_max_marshaled_size(KeyOnly<const Mod::MaskedJunk> stru, bool align);

NodeJSTest_Export
void gen_find_size(KeyOnly<const Mod::MaskedJunk> stru, size_t& size, size_t& padding);

NodeJSTest_Export
bool operator<<(Serializer& strm, KeyOnly<const Mod::MaskedJunk> stru);

NodeJSTest_Export
bool operator>>(Serializer& strm, KeyOnly<Mod::MaskedJunk> stru);

template <>
struct MarshalTraits<Mod::MaskedJunk> {
  static bool gen_is_bounded_size() { return false; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Mod {
/// This structure supports use of std::map with one or more keys.
struct NodeJSTest_Export MaskedJunk_OpenDDS_KeyLessThan {
  bool operator()(const Mod::MaskedJunk&, const Mod::MaskedJunk&) const
  {
    // With no keys, return false to allow use of
    // map with just one entry
    return false;
  }
};
}


namespace Mod {
class MaskedJunkTypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<Mod::MaskedJunk> {
  typedef Mod::MaskedJunk MessageType;
  typedef Mod::MaskedJunkSeq MessageSequenceType;
  typedef Mod::MaskedJunkTypeSupport TypeSupportType;
  typedef Mod::MaskedJunkTypeSupportImpl TypeSupportTypeImpl;
  typedef Mod::MaskedJunkDataWriter DataWriterType;
  typedef Mod::MaskedJunkDataReader DataReaderType;
  typedef Mod::MaskedJunk_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "Mod::MaskedJunk"; }
  static bool gen_has_key () { return false; }
  static size_t key_count () { return 0; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Mod {
class NodeJSTest_Export MaskedJunkTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<MaskedJunkTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<MaskedJunk> TraitsType;
  typedef MaskedJunkTypeSupport TypeSupportType;
  typedef MaskedJunkTypeSupport::_var_type _var_type;
  typedef MaskedJunkTypeSupport::_ptr_type _ptr_type;

  MaskedJunkTypeSupportImpl() {}
  virtual ~MaskedJunkTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static MaskedJunkTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
NodeJSTest_Export
const MetaStruct& getMetaStruct<Mod::MaskedJunk>();
NodeJSTest_Export
bool gen_skip_over(Serializer& ser, Mod::MaskedJunk*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

NodeJSTest_Export
v8::Local<v8::Object> copyToV8(const Mod::MaskedJunk& src);

NodeJSTest_Export
void copyFromV8(const v8::Local<v8::Object>& src, Mod::MaskedJunk& out);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: MaskedJunk */

/* End MODULE: Mod */
#endif /* OPENDDS_IDL_GENERATED_NODEJSTESTTYPESUPPORTIMPL_H_V6ELXA */
